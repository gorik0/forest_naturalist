// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: forestroute/forest_route.proto

package forestroute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForestRouteClient is the client API for ForestRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForestRouteClient interface {
	MakeRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (ForestRoute_MakeRouteClient, error)
	MakeRouteSummary(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteSummary, error)
	RegisterAnimal(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*IsAnimalUnknown, error)
}

type forestRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewForestRouteClient(cc grpc.ClientConnInterface) ForestRouteClient {
	return &forestRouteClient{cc}
}

func (c *forestRouteClient) MakeRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (ForestRoute_MakeRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ForestRoute_ServiceDesc.Streams[0], "/forestroute.ForestRoute/MakeRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &forestRouteMakeRouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForestRoute_MakeRouteClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type forestRouteMakeRouteClient struct {
	grpc.ClientStream
}

func (x *forestRouteMakeRouteClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forestRouteClient) MakeRouteSummary(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteSummary, error) {
	out := new(RouteSummary)
	err := c.cc.Invoke(ctx, "/forestroute.ForestRoute/MakeRouteSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestRouteClient) RegisterAnimal(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*IsAnimalUnknown, error) {
	out := new(IsAnimalUnknown)
	err := c.cc.Invoke(ctx, "/forestroute.ForestRoute/RegisterAnimal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForestRouteServer is the server API for ForestRoute service.
// All implementations must embed UnimplementedForestRouteServer
// for forward compatibility
type ForestRouteServer interface {
	MakeRoute(*Route, ForestRoute_MakeRouteServer) error
	MakeRouteSummary(context.Context, *Route) (*RouteSummary, error)
	RegisterAnimal(context.Context, *Animal) (*IsAnimalUnknown, error)
	mustEmbedUnimplementedForestRouteServer()
}

// UnimplementedForestRouteServer must be embedded to have forward compatible implementations.
type UnimplementedForestRouteServer struct {
}

func (UnimplementedForestRouteServer) MakeRoute(*Route, ForestRoute_MakeRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeRoute not implemented")
}
func (UnimplementedForestRouteServer) MakeRouteSummary(context.Context, *Route) (*RouteSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRouteSummary not implemented")
}
func (UnimplementedForestRouteServer) RegisterAnimal(context.Context, *Animal) (*IsAnimalUnknown, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnimal not implemented")
}
func (UnimplementedForestRouteServer) mustEmbedUnimplementedForestRouteServer() {}

// UnsafeForestRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForestRouteServer will
// result in compilation errors.
type UnsafeForestRouteServer interface {
	mustEmbedUnimplementedForestRouteServer()
}

func RegisterForestRouteServer(s grpc.ServiceRegistrar, srv ForestRouteServer) {
	s.RegisterService(&ForestRoute_ServiceDesc, srv)
}

func _ForestRoute_MakeRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Route)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForestRouteServer).MakeRoute(m, &forestRouteMakeRouteServer{stream})
}

type ForestRoute_MakeRouteServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type forestRouteMakeRouteServer struct {
	grpc.ServerStream
}

func (x *forestRouteMakeRouteServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func _ForestRoute_MakeRouteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestRouteServer).MakeRouteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forestroute.ForestRoute/MakeRouteSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestRouteServer).MakeRouteSummary(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForestRoute_RegisterAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Animal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestRouteServer).RegisterAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forestroute.ForestRoute/RegisterAnimal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestRouteServer).RegisterAnimal(ctx, req.(*Animal))
	}
	return interceptor(ctx, in, info, handler)
}

// ForestRoute_ServiceDesc is the grpc.ServiceDesc for ForestRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForestRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forestroute.ForestRoute",
	HandlerType: (*ForestRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeRouteSummary",
			Handler:    _ForestRoute_MakeRouteSummary_Handler,
		},
		{
			MethodName: "RegisterAnimal",
			Handler:    _ForestRoute_RegisterAnimal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MakeRoute",
			Handler:       _ForestRoute_MakeRoute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "forestroute/forest_route.proto",
}
